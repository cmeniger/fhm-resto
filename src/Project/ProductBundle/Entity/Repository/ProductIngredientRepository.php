<?php
namespace Project\ProductBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * ProductIngredientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductIngredientRepository extends FhmRepository
{
    /**
     * Constructor
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }

    /**
     * @param string $search
     * @param int    $page
     * @param int    $count
     * @param string $grouping
     * @param bool   $roleSuperAdmin
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getAdminIndex($search = "", $page = 1, $count = 5, $grouping = "", $roleSuperAdmin = false)
    {
        $builder = (($page + $count > 0) && $search) ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->equals('0');
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addOr($builder->expr()->field('grouping')->in((array) $grouping));
            $builder->addOr($builder->expr()->field('share')->equals(true));
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }
        // Pagination
        if($page + $count > 0)
        {
            $builder->limit($count);
            $builder->skip(($page - 1) * $count);
        }
        // Common
        $builder->sort('route');
        $builder->sort('order');
        $builder->sort('name');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param $id
     *
     * @return mixed
     */
    public function getSons($id)
    {
        return $this->createQueryBuilder()
            ->field('parent.id')->equals($id)
            ->sort('order')
            ->sort('name')
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param $id
     *
     * @return mixed
     */
    public function getSonsEnable($id)
    {
        return $this->createQueryBuilder()
            ->field('parent.id')->equals($id)
            ->field('active')->equals(true)
            ->field('delete')->equals(false)
            ->sort('order')
            ->sort('name')
            ->getQuery()
            ->execute()
            ->toArray();
    }
}