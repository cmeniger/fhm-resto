<?php
namespace Fhm\MediaBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * MediaRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends FhmRepository
{
    protected $tag;
    protected $filter;
    protected $private;

    /**
     * MediaRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
        $this->tag = "";
        $this->filter = "";
        $this->private = true;
    }

    /**
     * @param $tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->tag = $tag;

        return $this;
    }

    /**
     * @param $filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        if ($filter !== '') {
            $filter = str_replace('/*', '', $filter);
            $filter = str_replace('.', '', $filter);
            $this->filter = explode(',', $filter);
        }

        return $this;
    }

    /**
     * @param $private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->private = $private;

        return $this;
    }

    /**
     * @param string $search
     * @param bool $roleSuperAdmin
     * @return \Doctrine\ORM\Query
     */
    public function getAdminIndex($search = "", $roleSuperAdmin = false)
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // Tag
        if ($this->tag) {
            $builder->andWhere('a.tags = :(tag)')->setParameter('tag', $this->tag);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // RoleSuperAdmin
        if (!$roleSuperAdmin) {
            $builder->andWhere('a.delete = :bool')->setParameter('bool', false);
        }
        // Common
        $builder->orderBy('a.name');

        return $builder->getQuery();
    }


    /**
     * @param string $search
     * @param bool $roleSuperAdmin
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getAdminCount($search = "", $roleSuperAdmin = false)
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        $builder->select('count(a.id)');
        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // Tag
        if ($this->tag) {
            $builder->andWhere('a.tags = :(tag)')->setParameter('tag', $this->tag);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // RoleSuperAdmin
        if (!$roleSuperAdmin) {
            $builder->andWhere('a.delete = :bool')->setParameter('bool', false);
        }
        // Common
        $builder->orderBy('a.name');

        return $builder->getQuery()->getResult();
    }

    /**
     * @param string $search
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontIndex($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');

        $builder->where('a.active = :booActive')->setParameter('boolActive', true);
        $builder->andWhere('a.delete = :boolDelete')->setParameter('boolDelete', false);


        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // Tag
        if ($this->tag) {
            $builder->andWhere('a.tags = :(tag)')->setParameter('tag', $this->tag);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Filter
        if ($this->filter) {
            $builder->andWhere(
                $builder->expr()->orX($builder->expr()->in('type', $this->filter)),
                $builder->expr()->orX($builder->expr()->in('extension', $this->filter)),
                $builder->expr()->orX($builder->expr()->in('mimeType', $this->filter))
            );
        }
        // Common
        $builder->orderBy('a.name');
        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $search
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontCount($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');

        $builder->select('count(a.id)');
        $builder->where('a.active = :booActive')->setParameter('boolActive', true);
        $builder->andWhere('a.delete = :boolDelete')->setParameter('boolDelete', false);


        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // Tag
        if ($this->tag) {
            $builder->andWhere('a.tags = :(tag)')->setParameter('tag', $this->tag);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Filter
        if ($this->filter) {
            $builder->andWhere(
                $builder->expr()->orX($builder->expr()->in('type', $this->filter)),
                $builder->expr()->orX($builder->expr()->in('extension', $this->filter)),
                $builder->expr()->orX($builder->expr()->in('mimeType', $this->filter))
            );
        }
        // Common
        return $builder->getQuery()->getResult();
    }

    /**
     * @param $id
     *
     * @return mixed
     */
    public function getByTag($id)
    {
        $builder = $this->createQueryBuilder('a');
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Common
        $builder->andWhere('a.tags = :(tag)')->setParameter('tag', $id);
        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery()->execute()->toArray();
    }
}