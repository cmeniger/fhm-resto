<?php
namespace Fhm\MediaBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * MediaTagRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaTagRepository extends FhmRepository
{
    protected $root;
    protected $private;

    /**
     * MediaTagRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
        $this->root = "";
        $this->private = true;
        $this->sort = array("route", "asc");
    }

    /**
     * @param $root
     *
     * @return $this
     */
    public function setRoot($root)
    {
        $this->root = $root;

        return $this;
    }

    /**
     * @param $private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->private = $private;

        return $this;
    }

    /**
     * @param $id
     * @return mixed
     */
    public function getSons($id)
    {
        $builder = $this->createQueryBuilder('a');
        $builder->Where('a.parent = :parent')->setParameter('parent', $id);
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Common
        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param $id
     * @return mixed
     */
    public function getSonsEnable($id)
    {
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.active = :boolActive')->setParameter('boolActive', true);
        $builder->andWhere('a.delete = :boolDelete')->setParameter('boolDelete', false);
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Common
        $builder->andWhere('a.parent = :parent')->setParameter('parent', $id);
        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     *
     * @return mixed
     */
    public function getAllEnable()
    {
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.active = :boolActive')->setParameter('boolActive', true);
        $builder->andWhere('a.delete = :boolDelete')->setParameter('boolDelete', false);
        // Root
        if ($this->root) {
            $builder->andWhere('a.parent = :parent')->setParameter('parent', $this->root);
        } // Parent
        elseif ($this->parent) {
            $builder->andWhere('a.parent IN (:parents)')->setParameter('parents', [0, null]);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Common
        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @return mixed
     */
    public function getAllFiltered()
    {
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.active = :boolActive')->setParameter('boolActive', true);
        $builder->andWhere('a.delete = :boolDelete')->setParameter('boolDelete', false);
        // Root
        if ($this->root) {
            $builder->andWhere('a.parent = :parent')->setParameter('parent', $this->root);
        } // Parent
        elseif ($this->parent) {
            $builder->andWhere('a.parent IN (:parents)')->setParameter('parents', [0, null]);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Common
        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery()->execute();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getFormFiltered()
    {
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.active = :boolActive')->setParameter('boolActive', true);
        $builder->andWhere('a.delete = :boolDelete')->setParameter('boolDelete', false);
        // Root
        if ($this->root) {
            $builder->andWhere('a.parent = :parent')->setParameter('parent', $this->root);
        } // Parent
        elseif ($this->parent) {
            $builder->andWhere('a.parent IN (:parents)')->setParameter('parents', [0, null]);
        }
        // Private
        if (!$this->private) {
            $builder->andWhere('a.private = :bool1')->setParameter('bool1', false);
        }
        // Common
        $builder->orderBy('a.name', 'ASC');

        return $builder;
    }
}