<?php
namespace Fhm\MediaBundle\Document\Repository;

use Fhm\FhmBundle\Document\Repository\FhmRepository;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * MediaTagRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaTagRepository extends FhmRepository
{
    protected $root;
    protected $private;

    /**
     * MediaTagRepository constructor.
     * @param DocumentManager $dm
     * @param UnitOfWork $uow
     * @param ClassMetadata $class
     */
    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        parent::__construct($dm, $uow, $class);
        $this->root = "";
        $this->private = true;
        $this->sort = array("route", "asc");
    }

    /**
     * @param $root
     *
     * @return $this
     */
    public function setRoot($root)
    {
        $this->root = $root;

        return $this;
    }

    /**
     * @param $private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->private = $private;

        return $this;
    }

    /**
     * @param        $id
     * @param string $grouping
     *
     * @return mixed
     */
    public function getSons($id, $grouping = '')
    {
        $builder = $this->createQueryBuilder();
        // Private
        if (!$this->private) {
            $builder->field('private')->equals(false);
        }
        // Common
        $builder->field('parent.id')->equals($id);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param        $id
     * @param string $grouping
     *
     * @return mixed
     */
    public function getSonsEnable($id, $grouping = '')
    {
        $builder = $this->createQueryBuilder();
        // Private
        if (!$this->private) {
            $builder->field('private')->equals(false);
        }
        // Common
        $builder->field('parent.id')->equals($id);
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getAllEnable($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Root
        if ($this->root) {
            $builder->field('parent.id')->equals($this->root);
        } // Parent
        elseif ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Private
        if (!$this->private) {
            $builder->field('private')->equals(false);
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getAllFiltered($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Root
        if ($this->root) {
            $builder->field('parent.id')->equals($this->root);
        } // Parent
        elseif ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Private
        if (!$this->private) {
            $builder->field('private')->equals(false);
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getFormFiltered()
    {
        $builder = $this->createQueryBuilder();
        // Root
        if ($this->root) {
            $builder->field('parent.id')->equals($this->root);
        } // Parent
        elseif ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Private
        if (!$this->private) {
            $builder->field('private')->equals(false);
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder;
    }
}