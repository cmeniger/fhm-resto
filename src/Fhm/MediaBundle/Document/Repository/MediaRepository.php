<?php

namespace Fhm\MediaBundle\Document\Repository;

use Fhm\FhmBundle\Document\Repository\FhmRepository;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * MediaRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends FhmRepository
{
    protected $tag;
    protected $filter;
    protected $private;

    /**
     * MediaRepository constructor.
     *
     * @param DocumentManager $dm
     * @param UnitOfWork      $uow
     * @param ClassMetadata   $class
     */
    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        parent::__construct($dm, $uow, $class);
        $this->tag     = "";
        $this->filter  = "";
        $this->private = true;
    }

    /**
     * @param $tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->tag = $tag;

        return $this;
    }

    /**
     * @param $filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        if($filter !== '')
        {
            $filter       = str_replace('/*', '', $filter);
            $filter       = str_replace('.', '', $filter);
            $this->filter = explode(',', $filter);
        }

        return $this;
    }

    /**
     * @param $private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->private = $private;

        return $this;
    }

    /**
     * @param string $search
     * @param bool   $roleSuperAdmin
     *
     * @return \Doctrine\ODM\MongoDB\Query\Query
     */
    public function getAdminIndex($search = "", $roleSuperAdmin = false)
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Tag
        if($this->tag)
        {
            $builder->field('tags.id')->equals($this->tag);
        }
        // Private
        if(!$this->private)
        {
            $builder->field('private')->equals(false);
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }
        // Common
        $this->builderSort($builder);

        return $builder->getQuery();
    }


    /**
     * @param string $search
     * @param bool   $roleSuperAdmin
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getAdminCount($search = "", $roleSuperAdmin = false)
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Tag
        if($this->tag)
        {
            $builder->field('tags.id')->equals($this->tag);
        }
        // Private
        if(!$this->private)
        {
            $builder->field('private')->equals(false);
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }

        return $builder->count()->getQuery()->execute();
    }

    /**
     * @param string $search
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontIndex($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Tag
        if($this->tag)
        {
            $builder->field('tags.id')->equals($this->tag);
        }
        // Private
        if(!$this->private)
        {
            $builder->field('private')->equals(false);
        }
        // Filter
        if($this->filter)
        {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('type')->in($this->filter))->addOr(
                    $builder->expr()->field('extension')->in($this->filter)
                )->addOr($builder->expr()->field('mimeType')->in($this->filter))
            );
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $search
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontCount($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Tag
        if($this->tag)
        {
            $builder->field('tags.id')->equals($this->tag);
        }
        // Private
        if(!$this->private)
        {
            $builder->field('private')->equals(false);
        }
        // Filter
        if($this->filter)
        {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('type')->in($this->filter))->addOr(
                    $builder->expr()->field('extension')->in($this->filter)
                )->addOr($builder->expr()->field('mimeType')->in($this->filter))
            );
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }

    /**
     * @param $id
     *
     * @return mixed
     */
    public function getByTag($id)
    {
        $builder = $this->createQueryBuilder();
        // Private
        if(!$this->private)
        {
            $builder->field('private')->equals(false);
        }
        // Common
        $builder->field('tags.id')->equals($id);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }
}