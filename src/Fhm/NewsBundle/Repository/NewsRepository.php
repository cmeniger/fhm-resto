<?php
namespace Fhm\NewsBundle\Repository;

use Fhm\FhmBundle\Repository\FhmRepository;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * NewsRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends FhmRepository
{
    /**
     * Constructor
     */
    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        parent::__construct($dm, $uow, $class);
    }

    /**
     * @param string $search
     * @param int    $page
     * @param int    $count
     * @param string $grouping
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontIndex($search = "", $page = 1, $count = 5, $grouping = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Pagination
        if($page > 0 && $count > 0)
        {
            $builder->limit($count);
            $builder->skip(($page - 1) * $count);
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('order', 'asc');
        $builder->sort('date_start', 'desc');
        $builder->sort('date_create', 'desc');
        $builder->sort('name', 'asc');

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param string $search
     * @param string $grouping
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontCount($search = "", $grouping = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return count($builder
            ->getQuery()
            ->execute()
            ->toArray());
    }

    /**
     * @param \Fhm\NewsBundle\Document\NewsGroup $newsgroup
     * @param string                             $search
     * @param int                                $page
     * @param int                                $count
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getNewsByGroupIndex(\Fhm\NewsBundle\Document\NewsGroup $newsgroup, $search = "", $page = 1, $count = 5)
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if($newsgroup->getAddGlobal())
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('newsgroups.id')->equals($newsgroup->getId()))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        else
        {
            $builder->field('newsgroups.id')->equals($newsgroup->getId());
        }
        // Pagination
        if($page > 0 && $count > 0)
        {
            $builder->limit($count);
            $builder->skip(($page - 1) * $count);
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort($newsgroup->getSortField(), $newsgroup->getSortOrder());

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param \Fhm\NewsBundle\Document\NewsGroup $newsgroup
     * @param string                             $search
     *
     * @return mixed
     */
    public function getNewsByGroupCount(\Fhm\NewsBundle\Document\NewsGroup $newsgroup, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if($newsgroup->getAddGlobal())
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('newsgroups.id')->equals($newsgroup->getId()))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        else
        {
            $builder->field('newsgroups.id')->equals($newsgroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @param \Fhm\NewsBundle\Document\NewsGroup $newsgroup
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getNewsByGroupAll(\Fhm\NewsBundle\Document\NewsGroup $newsgroup)
    {
        $builder = $this->createQueryBuilder();
        // Global
        if($newsgroup->getAddGlobal())
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('newsgroups.id')->equals($newsgroup->getId()))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        else
        {
            $builder->field('newsgroups.id')->equals($newsgroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort($newsgroup->getSortField(), $newsgroup->getSortOrder());

        return $builder
            ->getQuery()
            ->execute();
    }

    public function findAllParent()
    {
        return $this->createQueryBuilder()
            ->field('parent')->in(array('0', null))
            ->sort('name')
            ->getQuery()
            ->execute()
            ->toArray();
    }
}