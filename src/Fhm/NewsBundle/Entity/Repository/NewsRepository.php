<?php
namespace Fhm\NewsBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;
use Fhm\NewsBundle\Entity\NewsGroup;

/**
 * NewsRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends FhmRepository
{
    /**
     * NewsRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }

    /**
     * @param string $search
     * @return mixed
     */
    public function getFrontIndex($search = "")
    {
        $date = new \DateTime();
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        // Dates
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->orderBy('a.order', 'asc');
        $builder->orderBy('a.date_start', 'desc');
        $builder->orderBy('a.date_create', 'desc');
        $builder->orderBy('a.name', 'asc');

        return $builder->getQuery()->execute();
    }

    /**
     * @param string $search
     * @param string $grouping
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontCount($search = "", $grouping = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Dates
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_start')->equals(null))->addOr(
                $builder->expr()->field('date_start')->lt(new \DateTime())
            )
        );
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_end')->equals(null))->addOr(
                $builder->expr()->field('date_end')->gt(new \DateTime())
            )
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return count(
            $builder->getQuery()->execute()->toArray()
        );
    }

    /**
     * @param \Fhm\NewsBundle\Entity\NewsGroup $newsgroup
     * @param string $search
     * @param int $page
     * @param int $count
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getNewsByGroupIndex(
        \Fhm\NewsBundle\Entity\NewsGroup $newsgroup,
        $search = "",
        $page = 1,
        $count = 5
    ) {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if ($newsgroup->getAddGlobal()) {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('newsgroups.id')->equals($newsgroup->getId()))->addOr(
                    $builder->expr()->field('global')->equals(true)
                )
            );
        } else {
            $builder->field('newsgroups.id')->equals($newsgroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_start')->equals(null))->addOr(
                $builder->expr()->field('date_start')->lt(new \DateTime())
            )
        );
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_end')->equals(null))->addOr(
                $builder->expr()->field('date_end')->gt(new \DateTime())
            )
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort($newsgroup->getSortField(), $newsgroup->getSortOrder());

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param \Fhm\NewsBundle\Entity\NewsGroup $newsgroup
     * @param string $search
     *
     * @return mixed
     */
    public function getNewsByGroupCount(\Fhm\NewsBundle\Entity\NewsGroup $newsgroup, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if ($newsgroup->getAddGlobal()) {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('newsgroups.id')->equals($newsgroup->getId()))->addOr(
                    $builder->expr()->field('global')->equals(true)
                )
            );
        } else {
            $builder->field('newsgroups.id')->equals($newsgroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_start')->equals(null))->addOr(
                $builder->expr()->field('date_start')->lt(new \DateTime())
            )
        );
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_end')->equals(null))->addOr(
                $builder->expr()->field('date_end')->gt(new \DateTime())
            )
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }

    /**
     * @param \Fhm\NewsBundle\Entity\NewsGroup $newsgroup
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getNewsByGroupAll(\Fhm\NewsBundle\Entity\NewsGroup $newsgroup)
    {
        $builder = $this->createQueryBuilder();
        // Global
        if ($newsgroup->getAddGlobal()) {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('newsgroups.id')->equals($newsgroup->getId()))->addOr(
                    $builder->expr()->field('global')->equals(true)
                )
            );
        } else {
            $builder->field('newsgroups.id')->equals($newsgroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_start')->equals(null))->addOr(
                $builder->expr()->field('date_start')->lt(new \DateTime())
            )
        );
        $builder->addAnd(
            $builder->expr()->addOr($builder->expr()->field('date_end')->equals(null))->addOr(
                $builder->expr()->field('date_end')->gt(new \DateTime())
            )
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort($newsgroup->getSortField(), $newsgroup->getSortOrder());

        return $builder->getQuery()->execute();
    }

    public function findAllParent()
    {
        return $this->createQueryBuilder()->field('parent')->in(array('0', null))->sort('name')->getQuery()->execute(
        )->toArray();
    }

    /**
     * @param null $group
     * @return array
     */
    public function getListByGroup($group = null)
    {
        $ret = [];
        if ($group instanceof NewsGroup) {
            $builder = $this->createQueryBuilder('a');
            $builder->where('a.newsgroups = :group')->setParameter('group', $group->getId());
            $builder->andWhere('a.active = :bool1')->setParameter('bool1', true);
            $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
            $ret = $builder->getQuery()->execute();
        }

        return $ret;
    }
}