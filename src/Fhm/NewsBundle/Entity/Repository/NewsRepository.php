<?php
namespace Fhm\NewsBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;
use Fhm\NewsBundle\Entity\NewsGroup;

/**
 * NewsRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends FhmRepository
{
    /**
     * NewsRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }

    /**
     * @param string $search
     * @return mixed
     */
    public function getFrontIndex($search = "")
    {
        $date = new \DateTime();
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        // Dates
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->orderBy('a.order', 'asc');
        $builder->orderBy('a.date_start', 'desc');
        $builder->orderBy('a.date_create', 'desc');
        $builder->orderBy('a.name', 'asc');

        return $builder->getQuery()->execute();
    }

    /**
     * @param string $search
     * @return mixed
     */
    public function getFrontCount($search = "")
    {
        $date = new \DateTime();
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        $builder->select('count(a.id)');
        // Dates
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->orderBy('a.order', 'asc');
        $builder->orderBy('a.date_start', 'desc');
        $builder->orderBy('a.date_create', 'desc');
        $builder->orderBy('a.name', 'asc');


        return $builder->getQuery()->execute();
    }

    /**
     * @param NewsGroup $newsgroup
     * @param string $search
     * @return mixed
     */
    public function getNewsByGroupIndex(\Fhm\NewsBundle\Entity\NewsGroup $newsgroup, $search = "")
    {
        $date = new \DateTime();

        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');

        $builder->select('count(a.id)');
        // Global
        if ($newsgroup->getAddGlobal()) {
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.newsgroups', $newsgroup->getId())));
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.global', true)));
        } else {
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.newsgroups', $newsgroup->getId())));
        }
        // Dates
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );
        // Common
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        $builder->orderBy($newsgroup->getSortField());

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param \Fhm\NewsBundle\Entity\NewsGroup $newsgroup
     * @param string $search
     *
     * @return mixed
     */
    public function getNewsByGroupCount(\Fhm\NewsBundle\Entity\NewsGroup $newsgroup, $search = "")
    {
        $date = new \DateTime();

        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');

        $builder->select('count(a.id)');
        // Global
        if ($newsgroup->getAddGlobal()) {
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.newsgroups', $newsgroup->getId())));
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.global', true)));
        } else {
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.newsgroups', $newsgroup->getId())));
        }
        // Dates
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        $builder->orderBy($newsgroup->getSortField());

        return $builder->getQuery()->execute();
    }

    /**
     * @param \Fhm\NewsBundle\Entity\NewsGroup $newsgroup
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getNewsByGroupAll(\Fhm\NewsBundle\Entity\NewsGroup $newsgroup)
    {
        $date = new \DateTime();
        $builder = $this->createQueryBuilder('a');
        // Global
        if ($newsgroup->getAddGlobal()) {
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.newsgroups', $newsgroup->getId())));
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.global', true)));
        } else {
            $builder->andWhere($builder->expr()->orX($builder->expr()->eq('a.newsgroups', $newsgroup->getId())));
        }
        // Dates
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        $builder->orderBy($newsgroup->getSortField());

        return $builder->getQuery()->execute();
    }

    /**
     * @return mixed
     */
    public function findAllParent()
    {
        $builder= $this->createQueryBuilder('a');
        $builder->where($builder->expr()->isNull('parent'));
        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery()->execute();
    }

    /**
     * @param null $group
     * @return array
     */
    public function getListByGroup($group = null)
    {
        $ret = [];
        if ($group instanceof NewsGroup) {
            $builder = $this->createQueryBuilder('a');
            $builder->where('a.newsgroups = :group')->setParameter('group', $group->getId());
            $builder->andWhere('a.active = :bool1')->setParameter('bool1', true);
            $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
            $ret = $builder->getQuery()->execute();
        }

        return $ret;
    }
}