<?php
namespace Fhm\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * UserRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends FhmRepository
{
    /**
     * UserRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }


    /**
     * @param string $search
     * @param bool $roleSuperAdmin
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getAdminCount($search = "", $roleSuperAdmin = false)
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        $builder->where($builder->expr()->notIn('a.roles', ['ROLE_SUPER_ADMIN']));
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // RoleSuperAdmin
        if (!$roleSuperAdmin) {
            $builder->andWhere('a.delete = :bool')->setParameter('bool', false);
        }

        return count(
            $builder->getQuery()->execute()->toArray()
        );
    }

    /**
     * @param string $search
     * @return mixed
     */
    public function getFrontIndex($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        // Common
        $builder->where($builder->expr()->notIn('a.roles', ['ROLE_SUPER_ADMIN']));
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        $builder->andWhere('a.delete = :bool1')->setParameter('bool1', false);
        $builder->andWhere('a.active = :bool2')->setParameter('bool2', true);
        $builder->orderBy('a.username', 'ASC');

        return $builder->getQuery();
    }

    /**
     * @param string $search
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontCount($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        // Common
        $builder->where($builder->expr()->notIn('a.roles', ['ROLE_SUPER_ADMIN']));
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        $builder->andWhere('a.delete = :bool1')->setParameter('bool1', false);
        $builder->andWhere('a.active = :bool2')->setParameter('bool2', true);

        return count(
            $builder->getQuery()->execute()->toArray()
        );
    }

    /**
     * @param string $group
     *
     * @return mixed
     */
    public function getExport($group = "")
    {
        return $this->createQueryBuilder('a')->orderBy('a.username')->getQuery()->execute()->toArray();
    }

    /**
     * @param      $data
     * @param null $index
     *
     * @return mixed|string
     * @throws \Doctrine\ORM\ORMException
     */
    public function getImport($data, $index = null)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('usernameCanonical LIKE LOWER(:username)')->setParameter('username', strtolower($data['username']));
        $qb->where('emailCanonical LIKE LOWER(:email)')->setParameter('email', strtolower($data['email']));
        $results = $qb->getQuery()->execute()->toArray();
        if (count($results) > 1) {
            return 'error';
        } elseif (count($results) == 1) {
            return array_shift($results);
        } else {
            return '';
        }
    }

    /**
     * @param $name
     *
     * @return Object
     */
    public function getByName($name)
    {
        return $this->getUserByUsername($name);
    }

    /**
     * @param $username
     *
     * @return object
     */
    public function getUserByUsername($username)
    {
        return $this->findOneBy(array('usernameCanonical' => strtolower($username)));
    }

    /**
     * @param $email
     *
     * @return object
     */
    public function getUserByEmail($email)
    {
        return $this->findOneBy(array('emailCanonical' => strtolower($email)));
    }
}