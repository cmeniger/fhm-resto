<?php
namespace Fhm\EventBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * EventRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends FhmRepository
{
    /**
     * EventRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm,  ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }

    /**
     * @param string $search

     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontIndex($search = "")
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $builder->field('date_end')->gt(new \DateTime());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_start');
        $builder->sort('order');
        $builder->sort('name');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $search
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontCount($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $builder->field('date_end')->gt(new \DateTime());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }

    /**
     * @param \Fhm\EventBundle\Entity\EventGroup $eventgroup
     * @param string $search
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getEventByGroupIndex(\Fhm\EventBundle\Entity\EventGroup $eventgroup, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if ($eventgroup->getAddGlobal()) {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('eventgroups.id')->equals($eventgroup->getId()))->addOr(
                    $builder->expr()->field('global')->equals(true)
                )
            );
        } else {
            $builder->field('eventgroups.id')->equals($eventgroup->getId());
        }
        // Common
        $builder->field('date_end')->gt(new \DateTime());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_start');
        $builder->sort('order');
        $builder->sort('name');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param \Fhm\EventBundle\Entity\EventGroup $eventgroup
     * @param string $search
     *
     * @return mixed
     */
    public function getEventByGroupCount(\Fhm\EventBundle\Entity\EventGroup $eventgroup, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if ($eventgroup->getAddGlobal()) {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('eventgroups.id')->equals($eventgroup->getId()))->addOr(
                    $builder->expr()->field('global')->equals(true)
                )
            );
        } else {
            $builder->field('eventgroups.id')->equals($eventgroup->getId());
        }
        // Common
        $builder->field('date_end')->gt(new \DateTime());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }

    /**
     * @param \Fhm\EventBundle\Entity\EventGroup $eventgroup
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getEventByGroupAll(\Fhm\EventBundle\Entity\EventGroup $eventgroup)
    {
        $builder = $this->createQueryBuilder();
        // Global
        if ($eventgroup->getAddGlobal()) {
            $builder->addAnd(
                $builder->expr()->addOr($builder->expr()->field('eventgroups.id')->equals($eventgroup->getId()))->addOr(
                    $builder->expr()->field('global')->equals(true)
                )
            );
        } else {
            $builder->field('eventgroups.id')->equals($eventgroup->getId());
        }
        // Common
        $builder->field('date_end')->gt(new \DateTime());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_start');
        $builder->sort('order');
        $builder->sort('name');

        return $builder->getQuery()->execute();
    }

    /**
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getEventEnable()
    {
        $builder = $this->createQueryBuilder();
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_start');
        $builder->sort('order');
        $builder->sort('name');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param        $date
     * @param string $search
     * @param int $page
     * @param int $count
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontDateIndex($date, $search = "", $page = 1, $count = 5)
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder();
        $dateMin = new \DateTime($date);
        $dateMin->setTime(0, 0, 0);
        $dateMax = new \DateTime($date);
        $dateMax->setTime(23, 59, 59);
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Dates
        $builder->field('date_start')->lte($dateMax);
        $builder->field('date_end')->gte($dateMin);
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_start');
        $builder->sort('order');
        $builder->sort('name');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $search
     *
     * @return int
     * @throws \Doctrine\ORM\ORMException
     */
    public function getFrontDateCount($date, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        $dateMin = new \DateTime($date);
        $dateMin->setTime(0, 0, 0);
        $dateMax = new \DateTime($date);
        $dateMax->setTime(23, 59, 59);
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Dates
        $builder->field('date_start')->lte($dateMax);
        $builder->field('date_end')->gte($dateMin);
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }
}