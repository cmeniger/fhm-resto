<?php
namespace Fhm\PartnerBundle\Repository;

use Fhm\FhmBundle\Repository\FhmRepository;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * PartnerRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PartnerRepository extends FhmRepository
{
    /**
     * PartnerRepository constructor.
     * @param DocumentManager $dm
     * @param UnitOfWork $uow
     * @param ClassMetadata $class
     */
    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        parent::__construct($dm, $uow, $class);
    }

    /**
     * @param string $search
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontIndex($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();

        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param string $search
     * @param string $grouping
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontCount($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();

        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return count($builder
            ->getQuery()
            ->execute()
            ->toArray());
    }

    /**
     * @param \Fhm\PartnerBundle\Document\PartnerGroup $partnergroup
     * @param string                             $search
     * @param int                                $page
     * @param int                                $count
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getPartnerByGroupIndex(\Fhm\PartnerBundle\Document\PartnerGroup $partnergroup, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if($partnergroup->getAddGlobal())
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('partnergroups.id')->equals($partnergroup->getId()))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        else
        {
            $builder->field('partnergroups.id')->equals($partnergroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param \Fhm\PartnerBundle\Document\PartnerGroup $partnergroup
     * @param string                             $search
     *
     * @return mixed
     */
    public function getPartnerByGroupCount(\Fhm\PartnerBundle\Document\PartnerGroup $partnergroup, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder();
        // Global
        if($partnergroup->getAddGlobal())
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('partnergroups.id')->equals($partnergroup->getId()))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        else
        {
            $builder->field('partnergroups.id')->equals($partnergroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @param \Fhm\PartnerBundle\Document\PartnerGroup $partnergroup
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getPartnerByGroupAll(\Fhm\PartnerBundle\Document\PartnerGroup $partnergroup)
    {
        $builder = $this->createQueryBuilder();
        // Global
        if($partnergroup->getAddGlobal())
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('partnergroups.id')->equals($partnergroup->getId()))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        else
        {
            $builder->field('partnergroups.id')->equals($partnergroup->getId());
        }
        // Dates
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_start')->equals(null))
                ->addOr($builder->expr()->field('date_start')->lt(new \DateTime()))
        );
        $builder->addAnd(
            $builder->expr()
                ->addOr($builder->expr()->field('date_end')->equals(null))
                ->addOr($builder->expr()->field('date_end')->gt(new \DateTime()))
        );
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder
            ->getQuery()
            ->execute();
    }
}