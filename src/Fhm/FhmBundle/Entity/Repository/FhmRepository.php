<?php
namespace Fhm\FhmBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * FhmRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FhmRepository extends EntityRepository
{
    protected $parent;
    protected $sort;

    /**
     * FhmRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
        $this->parent = false;
        $this->sort = array("order", "asc");
    }


    /**
     * @param $boolean
     *
     * @return $this
     */
    public function setParent($boolean)
    {
        $this->parent = $boolean;

        return $this;
    }

    /**
     * @param mixed $field
     * @param string $order
     *
     * @return $this
     */
    public function setSort($field, $order = "asc")
    {
        $this->sort = is_array($field) ? $field : array($field, $order);

        return $this;
    }

    /**
     * @param string $search
     * @param bool $roleSuperAdmin
     * @return mixed
     */
    public function getAdminIndex($search = "", $roleSuperAdmin = false)
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder('a');
        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // RoleSuperAdmin
        if (!$roleSuperAdmin) {
            $builder->andWhere('a.delete = :bool')->setParameter('bool', false);
        }

        return $builder->getQuery();
    }

    /**
     * @param string $search
     * @param bool $roleSuperAdmin
     * @return mixed
     */
    public function getAdminCount($search = "", $roleSuperAdmin = false)
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder('a');

        $builder->select('count(a.id)');
        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        // RoleSuperAdmin
        if (!$roleSuperAdmin) {
            $builder->andWhere('a.delete = :bool')->setParameter('bool', false);
        }

        return $builder->getQuery()->execute();
    }

    /**
     * @param string $search
     * @return \Doctrine\ORM\Query
     */
    public function getFrontIndex($search = "")
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder('a');
        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        $builder->andWhere('a.active = :bool')->setParameter('bool', true);
        $builder->andWhere('a.delete = :bool')->setParameter('bool', false);

        return $builder->getQuery();
    }

    /**
     * @param string $search
     * @return mixed
     */
    public function getFrontCount($search = "")
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder('a');

        $builder->select('count(a.id)');
        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        $builder->andWhere('a.active = :bool')->setParameter('bool', true);
        $builder->andWhere('a.delete = :bool')->setParameter('bool', false);

        return $builder->getQuery()->execute();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getFormEnable()
    {
        $builder = $this->createQueryBuilder('a');

        // Parent
        if ($this->parent) {
            $builder->andWhere('a.parent IN :(parent)')->setParameter('parent', [0, null]);
        }
        $builder->andWhere('a.active = :bool')->setParameter('bool', true);
        $builder->andWhere('a.delete = :bool')->setParameter('bool', false);

        return $builder->getQuery()->execute();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getFormFiltered()
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder;
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getFormAll()
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $this->builderSort($builder);

        return $builder;
    }

    /**
     * @return array
     */
    public function getListEnable()
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);
        // Format list
        $documents = $builder->getQuery()->execute()->toArray();
        $list = array();
        foreach ($documents as $document) {
            $list[$document->getId()] = $document;
        }

        return $list;
    }

    /**
     * @param string $grouping
     * @return array
     */
    public function getListAll($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $this->builderSort($builder);
        // Format list
        $documents = $builder->getQuery()->execute()->toArray();
        $list = array();
        foreach ($documents as $document) {
            $list[$document->getId()] = $document;
        }

        return $list;
    }

    /**
     * @param $id
     *
     * @return mixed
     */
    public function getById($id)
    {
        return $this->findOneById($id);
    }

    /**
     * @param $name
     *
     * @return mixed
     */
    public function getByName($name)
    {
        return $this->findOneByName($name);
    }

    /**
     * @param $alias
     *
     * @return mixed
     */
    public function getByAlias($alias)
    {
        return $this->findOneByAlias($alias);
    }


    /**
     * @param bool $roleSuperAdmin
     * @return mixed
     */
    public function getAll($roleSuperAdmin = false)
    {
        return $this->getAdminIndex("", 0, 0, $roleSuperAdmin);
    }

    /**
     * @return mixed
     */
    public function getAllEnable()
    {
        return $this->getFrontIndex("", 0, 0);
    }

    /**
     * @return mixed
     */
    public function getAllFiltered()
    {
        $builder = $this->createQueryBuilder('a');
        // Parent
        if ($this->parent) {
            $builder->field('parent')->in(array('0', null));
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @return mixed
     */
    public function getGlobalEnableCount()
    {
        $query =  $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->where('a.global = :bool')->setParameter('bool', true)
            ->andWhere('a.active = :bool')->setParameter('bool', true)
            ->andWhere('a.delete = :bool')->setParameter('bool', false)->getQuery();
        return $query->execute();
    }

    /**
     * @return mixed
     */
    public function getGlobalAllCount()
    {
        $query =  $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->where('a.global = :bool')->setParameter('bool', true)
            ->getQuery();
        return $query->execute();
    }

    /**
     * @return mixed
     */
    public function getExport()
    {
        return $this->getAdminIndex("", 0);
    }

    /**
     * @param      $data
     * @param null $index
     *
     * @return mixed|string
     */
    public function getImport($data, $index = null)
    {
        $value = !is_null($index) ? $data[$index] : $data['name'];
        $results = $this->createQueryBuilder('a')
            ->where('a.name = :str')->setParameter('str', $value)
            ->getQuery()->execute()->toArray();
        if (count($results) <= 1) {
            return array_pop($results);
        } else {
            return 'error';
        }
    }

    /**
     * @param $id
     * @param $string
     *
     * @return bool
     * @throws \Doctrine\ODM\MongoDB\LockException
     */
    public function isUnique($id, $string)
    {
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.id != :val')->setParameter('val', $id);
        $builder->orWhere('a.id != :str')->setParameter('str', $string);
        $builder->orWhere('a.name != :str')->setParameter('str', $string);
        $builder->orWhere('a.alias != :str')->setParameter('str', $string);
        $count = $builder->select('count(a.id)')->getQuery()->execute();

        return $count > 0 ? false : true;
    }

    /**
     * @param $search
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    protected function search($search)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.id = :val')->setParameter('val', $search);
        // Search all fields
        foreach ($this->getClassMetadata()->getFieldNames() as $field) {
            $qb->orWhere('a.'.$field.' LIKE :str')->setParameter('str', '%'.$search.'%');
        }

        return $qb;
    }

    /**
     * @param $entity
     * @return mixed
     */
    public function truncate($entity)
    {
        return $this->createQueryBuilder($entity)->delete()->getQuery()->execute();
    }
}