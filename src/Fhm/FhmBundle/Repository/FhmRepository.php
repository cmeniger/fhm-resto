<?php
namespace Fhm\FhmBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * FhmRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FhmRepository extends DocumentRepository
{
    protected $parent;
    protected $language;
    protected $sort;

    /**
     * Constructor
     */
    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        parent::__construct($dm, $uow, $class);
        $this->parent   = false;
        $this->language = false;
        $this->sort     = array("order", "asc");
    }

    /**
     * @param $language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->language = $language;

        return $this;
    }

    /**
     * @param $boolean
     *
     * @return $this
     */
    public function setParent($boolean)
    {
        $this->parent = $boolean;

        return $this;
    }

    /**
     * @param mixed  $field
     * @param string $order
     *
     * @return $this
     */
    public function setSort($field, $order = "asc")
    {
        $this->sort = is_array($field) ? $field : array($field, $order);

        return $this;
    }

    /**
     * @param string $search
     * @param int    $page
     * @param int    $count
     * @param string $grouping
     * @param bool   $roleSuperAdmin
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getAdminIndex($search = "", $page = 1, $count = 5, $grouping = "", $roleSuperAdmin = false)
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }
        // Pagination
        if($page > 0 && $count > 0)
        {
            $builder->limit($count);
            $builder->skip(($page - 1) * $count);
        }
        // Common
        $this->builderSort($builder);

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $search
     * @param string $grouping
     * @param bool   $roleSuperAdmin
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getAdminCount($search = "", $grouping = "", $roleSuperAdmin = false)
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }

        return $builder
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @param string $search
     * @param int    $page
     * @param int    $count
     * @param string $grouping
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontIndex($search = "", $page = 1, $count = 5, $grouping = "")
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        // Pagination
        if($page > 0 && $count > 0)
        {
            $builder->limit($count);
            $builder->skip(($page - 1) * $count);
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param string $search
     * @param string $grouping
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getFrontCount($search = "", $grouping = "")
    {
        $builder = $search ? $this->search($search) : $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('global')->equals(true))
            );
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @param string $grouping
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getFormEnable($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder;
    }

    /**
     * @param string $grouping
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getFormFiltered($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->field('grouping')->in((array) $grouping);
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder;
    }

    /**
     * @param string $grouping
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getFormAll($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Common
        $this->builderSort($builder);

        return $builder;
    }

    /**
     * @param string $grouping
     *
     * @return array
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getListEnable($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);
        // Format list
        $documents = $builder->getQuery()->execute()->toArray();
        $list      = array();
        foreach($documents as $document)
        {
            $list[$document->getId()] = $document;
        }

        return $list;
    }

    /**
     * @param string $grouping
     *
     * @return array
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getListAll($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Common
        $this->builderSort($builder);
        // Format list
        $documents = $builder->getQuery()->execute()->toArray();
        $list      = array();
        foreach($documents as $document)
        {
            $list[$document->getId()] = $document;
        }

        return $list;
    }

    /**
     * @param $id
     *
     * @return mixed
     */
    public function getById($id)
    {
        return $this->findOneById($id);
    }

    /**
     * @param $name
     *
     * @return mixed
     */
    public function getByName($name)
    {
        return $this->findOneByName($name);
    }

    /**
     * @param $alias
     *
     * @return mixed
     */
    public function getByAlias($alias)
    {
        return $this->findOneByAlias($alias);
    }

    /**
     * @param $grouping
     *
     * @return mixed
     */
    public function getByGrouping($grouping)
    {
        $builder = $this->createQueryBuilder();
        $builder->field('grouping')->in((array) $grouping);
        $this->builderSort($builder);

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param string $grouping
     * @param bool   $roleSuperAdmin
     *
     * @return mixed
     */
    public function getAll($grouping = "", $roleSuperAdmin = false)
    {
        return $this->getAdminIndex("", 0, 0, $grouping, $roleSuperAdmin);
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getAllEnable($grouping = "")
    {
        return $this->getFrontIndex("", 0, 0, $grouping);
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getAllFiltered($grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Common
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $this->builderSort($builder);

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @return mixed
     */
    public function getGlobalEnableCount()
    {
        return $this->createQueryBuilder()
            ->field('global')->equals(true)
            ->field('active')->equals(true)
            ->field('delete')->equals(false)
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @return mixed
     */
    public function getGlobalAllCount()
    {
        return $this->createQueryBuilder()
            ->field('global')->equals(true)
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @param int    $page
     * @param int    $count
     * @param string $grouping
     * @param bool   $roleSuperAdmin
     *
     * @return mixed
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getHistoricIndex($document, $page = 1, $count = 5, $grouping = "", $roleSuperAdmin = false)
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }
        // Pagination
        if($page > 0 && $count > 0)
        {
            $builder->limit($count);
            $builder->skip(($page - 1) * $count);
        }
        // Common
        $builder->field('historic_parent')->equals($document);
        $builder->sort('date_create','desc');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param string $grouping
     * @param bool   $roleSuperAdmin
     *
     * @return int
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getHistoricCount($document, $grouping = "", $roleSuperAdmin = false)
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // RoleSuperAdmin
        if(!$roleSuperAdmin)
        {
            $builder->field('delete')->equals(false);
        }
        // Common
        $builder->field('historic_parent')->equals($document);

        return $builder
            ->count()
            ->getQuery()
            ->execute();
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getHistoricAll($document, $grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Common
        $builder->field('historic_parent')->equals($document);
        $builder->sort('date_create','desc');

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getHistoricEnable($document, $grouping = "")
    {
        $builder = $this->createQueryBuilder();
        // Parent
        if($this->parent)
        {
            $builder->field('parent')->in(array('0', null));
        }
        // Grouping
        if($grouping != "")
        {
            $builder->addAnd(
                $builder->expr()
                    ->addOr($builder->expr()->field('grouping')->in((array) $grouping))
                    ->addOr($builder->expr()->field('share')->equals(true))
            );
        }
        // Language
        if($this->language)
        {
            $builder->field('languages')->in((array) $this->language);
        }
        // Common
        $builder->field('historic_parent.id')->equals($document->getId());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_create','desc');

        return $builder
            ->getQuery()
            ->execute()
            ->toArray();
    }

    /**
     * @param string $grouping
     *
     * @return mixed
     */
    public function getExport($grouping = "")
    {
        return $this->getAdminIndex("", 0, 0, $grouping);
    }

    /**
     * @param      $data
     * @param null $index
     *
     * @return mixed|string
     */
    public function getImport($data, $index = null)
    {
        $value   = !is_null($index) ? $data[$index] : $data['name'];
        $results = $this->createQueryBuilder()
            ->field('name')->equals($value)
            ->getQuery()
            ->execute()
            ->toArray();
        if(count($results) <= 1)
        {
            return array_pop($results);
        }
        else
        {
            return 'error';
        }
    }

    /**
     * @param $id
     * @param $string
     *
     * @return bool
     * @throws \Doctrine\ODM\MongoDB\LockException
     */
    public function isUnique($id, $string)
    {
        $builder = $this->createQueryBuilder();
        $builder->field('_id')->notEqual($id);
        $builder->addOr($builder->expr()->field('id')->equals($string));
        $builder->addOr($builder->expr()->field('name')->equals($string));
        $builder->addOr($builder->expr()->field('alias')->equals($string));
        $count = $builder
            ->count()
            ->getQuery()
            ->execute();

        return $count > 0 ? false : true;
    }

    /**
     * @param $search
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    protected function search($search)
    {
        $qb     = $this->createQueryBuilder();
        $regx   = '/.*' . $search . '.*/i';
        $fields = array();
        // Search ID field (not supported regex search)
        $fields[] = $qb->expr()->field('_id')->equals($search);
        // Search all fields
        foreach($this->class->getFieldNames() as $field)
        {
            $fields[] = $qb->expr()->field($field)->equals(new \MongoRegex($regx));
        }
        // Add OR conditions
        foreach($fields as $field)
        {
            $qb->addOr($field);
        }

        return $qb;
    }

    /**
     * @param $document
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function truncate($document)
    {
        return $this->createQueryBuilder($document)
            ->remove()
            ->getQuery()
            ->execute();
    }

    /**
     * @param \Doctrine\ODM\MongoDB\Query\Builder $builder
     */
    protected function builderSort(\Doctrine\ODM\MongoDB\Query\Builder &$builder)
    {
        $builder->sort($this->sort[0], $this->sort[1]);
        if($this->sort[0] != 'order')
        {
            $builder->sort('order');
        }
        if($this->sort[0] != 'name')
        {
            $builder->sort('name');
        }
    }
}