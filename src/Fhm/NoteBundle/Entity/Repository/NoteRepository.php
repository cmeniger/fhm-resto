<?php
namespace Fhm\NoteBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Mapping\Id;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * NoteRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteRepository extends FhmRepository
{
    /**
     * NoteRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }


    /**
     * @param $user
     * @param $object
     *
     * @return array|null|object
     */
    public function getByUserAndObject($user, $object)
    {
        if ($user == '' || $object == '') {
            return '';
        }
        $builder = $this->createQueryBuilder();
        $builder->field('user.$id')->equals($user->getId());
        $builder->field('parent.$id')->equals($object->getId());
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_create', 'desc');

        return $builder->getQuery()->getSingleResult();
    }

    /**
     * @param $object
     *
     * @return array|null|object
     */
    public function getAverageByObject($object)
    {
        if ($object == '') {
            return '';
        }
        $note = 0;
        $builder = $this->createQueryBuilder();
        $builder->field('parent.$id')->equals($object);
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->group(array('object' => 1), array('note' => 0), array('note' => 1))->reduce(
            'function ( curr, result ){ result.note += curr.note;}'
        );
        $result = $builder->getQuery()->execute()->toArray();
        if (!empty($result)) {
            $note = $result[0]['note'];
        }

        return $note;
    }

    /**
     * @param $object
     *
     * @return array|null|object
     */
    public function getByObject($object)
    {
        if ($object == '') {
            return '';
        }
        $builder = $this->createQueryBuilder();
        $builder->field('parent.$id')->equals($object);
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);
        $builder->sort('date_create', 'desc');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param $object
     *
     * @return array|null|object
     */
    public function getCountByObject($object)
    {
        if ($object == '') {
            return '';
        }
        $builder = $this->createQueryBuilder();
        $builder->field('parent.$id')->equals($object);
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }

    /**
     * @param $object
     * @param $value
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getCountByObjectAndValue($object, $value)
    {
        if ($object == '') {
            return '';
        }
        $builder = $this->createQueryBuilder();
        $builder->field('parent.$id')->equals($object);
        $builder->field('note')->equals($value);
        $builder->field('active')->equals(true);
        $builder->field('delete')->equals(false);

        return $builder->count()->getQuery()->execute();
    }
}