<?php
namespace Fhm\NotificationBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * NotificationRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends FhmRepository
{
    /**
     * NotificationRepository constructor.
     * @param EntityManager $dm
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }

    /**
     * @param $user
     *
     * @return int|mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getIndexNew($user)
    {
        if (!$user) {
            return 0;
        }
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.user = :userid')->setParameter('useid', $user->getId());
        $builder->andWhere('a.new = :boolNew')->setParameter('boolNew', true);
        $builder->andWhere('a.active = :activeStatus')->setParameter('activeStatus', true);
        $builder->andWhere('a.delete = :deleteStatus')->setParameter('deleteStatus', false);
        $builder->orderBy('a.date_create', 'DESC');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param $user
     *
     * @return int|mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getIndexAll($user)
    {
        if (!$user) {
            return 0;
        }
        $builder = $this->_em->createQueryBuilder();
        $builder->select('a');
        $builder->from($this->_entityName, 'a');
        $builder->leftJoin('FhmUserBundle:User', 'u');
        $builder->where('u.id = :userid')->setParameter('useid', $user->getId());
        $builder->andWhere('a.active = :activeStatus')->setParameter('activeStatus', true);
        $builder->andWhere('a.delete = :deleteStatus')->setParameter('deleteStatus', false);
        $builder->orderBy('a.date_create', 'DESC');

        return $builder->getQuery()->execute()->toArray();
    }

    /**
     * @param $user
     *
     * @return int|mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getCountNew($user)
    {
        if (!$user) {
            return 0;
        }
        $builder = $this->_em->createQueryBuilder();
        $builder->select('count(a)');
        $builder->from($this->_entityName, 'a');
        $builder->leftJoin('FhmUserBundle:User', 'u');
        $builder->where('u.id = :userid');
        $builder->andWhere('a.new = true');
        $builder->andWhere('a.active = true');
        $builder->andWhere('a.delete = false');
        $builder->setParameter('userid', $user->getId());
        $result = $builder->getQuery()->getSingleResult();

        return array_shift($result);
    }

    /**
     * @param $user
     *
     * @return int|mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getCountAll($user)
    {
        if (!$user) {
            return 0;
        }
        $builder = $this->_em->createQueryBuilder();
        $builder->select('count(a.id)');
        $builder->from($this->_entityName, 'a');
        $builder->leftJoin('FhmUserBundle:User', 'u');
        $builder->where('u.id = :userid')->setParameter('useid', $user->getId());
        $builder->andWhere('a.active = :activeStatus')->setParameter('activeStatus', true);
        $builder->andWhere('a.delete = :deleteStatus')->setParameter('deleteStatus', false);

        return $builder->getQuery()->execute();
    }
}