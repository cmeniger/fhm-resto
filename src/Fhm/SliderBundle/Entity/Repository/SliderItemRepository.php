<?php
namespace Fhm\SliderBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Fhm\FhmBundle\Entity\Repository\FhmRepository;

/**
 * SliderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SliderItemRepository extends FhmRepository
{
    /**
     * Constructor
     */
    public function __construct(EntityManager $dm, ClassMetadata $class)
    {
        parent::__construct($dm, $class);
    }

    /**
     * @param string $search
     * @return \Doctrine\ORM\Query
     */
    public function getFrontIndex($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');

        $date = new \DateTime();
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        // Dates
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );

        $builder->orderBy('a.name', 'ASC');

        return $builder->getQuery();
    }

    /**
     * @param string $search
     * @return int
     */
    public function getFrontCount($search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');

        $date = new \DateTime();
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        // Dates
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_start'),
                $builder->expr()->lt('a.date_start', $date->format('yyyy-mm-dd'))
            )
        );
        $builder->andWhere(
            $builder->expr()->orX(
                $builder->expr()->isNull('a.date_end'),
                $builder->expr()->gt('a.date_end', $date->format('yyyy-mm-dd'))
            )
        );

        return count(
            $builder->getQuery()->execute()->toArray()
        );
    }

    /**
     * @param \Fhm\SliderBundle\Entity\Slider $slider
     * @param string $search
     * @return \Doctrine\ORM\Query
     */
    public function getByGroupIndex(\Fhm\SliderBundle\Entity\Slider $slider, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);

        // Global
        if ($slider->getAddGlobal()) {
            $builder->andWhere(
                $builder->expr()->orX(
                    $builder->expr()->eq('a.sliders', $slider->getId()),
                    $builder->expr()->eq('a.global', true)
                )
            );
        } else {
            $builder->andWhere('sliders.id = :id')->setParameter('id', $slider->getId());
        }
        $builder->orderBy($slider->getSortField(), $slider->getSortOrder());

        return $builder->getQuery();
    }

    /**
     * @param \Fhm\SliderBundle\Entity\Slider $slider
     * @param string $search
     *
     * @return mixed
     */
    public function getByGroupCount(\Fhm\SliderBundle\Entity\Slider $slider, $search = "")
    {
        $builder = ($search) ? $this->search($search) : $this->createQueryBuilder('a');
        $builder->select('count(a.id)');
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        // Global
        if ($slider->getAddGlobal()) {
            $builder->andWhere(
                $builder->expr()->orX(
                    $builder->expr()->eq('a.sliders', $slider->getId()),
                    $builder->expr()->eq('a.global', true)
                )
            );
        } else {
            $builder->andWhere('sliders.id = :id')->setParameter('id', $slider->getId());
        }

        return $builder->getQuery()->execute();
    }

    /**
     * @param \Fhm\SliderBundle\Entity\Slider $slider
     *
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     */
    public function getByGroupAll(\Fhm\SliderBundle\Entity\Slider $slider)
    {
        $builder = $this->createQueryBuilder('a');
        $builder->where('a.active = :bool1')->setParameter('bool1', true);
        $builder->andWhere('a.delete = :bool2')->setParameter('bool2', false);
        // Global
        if ($slider->getAddGlobal()) {
            $builder->andWhere(
                $builder->expr()->orX(
                    $builder->expr()->eq('a.sliders', $slider->getId()),
                    $builder->expr()->eq('a.global', true)
                )
            );
        } else {
            $builder->andWhere('sliders.id = :id')->setParameter('id', $slider->getId());
        }

        $builder->orderBy($slider->getSortField(), $slider->getSortOrder());

        return $builder->getQuery()->execute();
    }
}