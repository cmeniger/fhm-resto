security:
    encoders:
        # Our user class and the algorithm we'll use to encode passwords
        # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
        FOS\UserBundle\Model\UserInterface: sha512

        #ROLE SYMFONY2
    role_hierarchy:
        ROLE_MODERATOR:                     ROLE_USER
        ROLE_ADMIN:                         ROLE_MODERATOR
        ROLE_SUPER_ADMIN:                   ROLE_ADMIN

    providers:
        # in this example, users are stored via Doctrine in the database
        # To see the users at src/AppBundle/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: http://symfony.com/doc/current/cookbook/security/custom_provider.html
#        database_users:
#            entity: { class: AppBundle:User, property: username }
        fos_userbundle:
            id:                             fos_user.user_provider.username
        fhm_userbundle:
            id:                             fhm_user.security.user_provider

    # http://symfony.com/doc/current/book/security.html#firewalls-authentication
    firewalls:
        main:
            pattern:                        ^/
            form_login:
                provider:                   fhm_userbundle
#                csrf_provider:              form.csrf_provider
                csrf_token_generator: security.csrf.token_manager
                # The route name that the login form submits to
                check_path: security_login
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security_login
                # Secure the login form against CSRF
                # Reference: http://symfony.com/doc/current/cookbook/security/csrf_in_login_form.html
#                csrf_token_generator: security.csrf.token_manager

            oauth:
                resource_owners:
                    facebook:               fhm_user_check_facebook
                    twitter:                fhm_user_check_twitter
                    google:                 fhm_user_check_google
                login_path:                 fos_user_security_login
                failure_path:               fos_user_security_login
                check_path:                 fos_user_security_check
                oauth_user_provider:
                    service:                fhm_user.oauth.user_provider
            logout:                         true
#                # The route name the user can go to in order to logout
#                path: security_logout
#                # The name of the route to redirect to after logging out
#                target: homepage

            anonymous:                      true
    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        - { path: '^/(%app_locales%)/login$', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/(%app_locales%)/register', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/(%app_locales%)/resetting', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/(%app_locales%)/admin/', role: ROLE_MODERATOR }
        - { path: '^/(%app_locales%)/mail/', role: ROLE_ADMIN }