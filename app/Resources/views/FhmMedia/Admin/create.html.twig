{% trans_default_domain instance.domain %}
{% extends "::FhmFhm/Admin/create.html.twig" %}

{% block content_data_submit_list_button %}{% endblock %}
{% block content_data_submit_list %}{% endblock %}
{% block content_data_seo %}{% endblock %}

{% block content_data_form_attribut %}
    class="dropzone" id="media-dropzone"  enctype="multipart/form-data"

{% endblock %}

{% block content_data_fields_data %}
    <div class="large-6 medium-6 small-12 columns">
        <fieldset>
            <legend>{{ (instance.translation ~ '.admin.create.form.fieldset.data')|trans }}</legend>
            <div class="row">
                {{ form_label(form.name) }}
                {{ form_errors(form.name) }}
                {{ form_widget(form.name) }}
            </div>
            <div class="row">
                {{ form_label(form.description) }}
                {{ form_errors(form.description) }}
                {{ form_widget(form.description) }}
            </div>
        </fieldset>
        <fieldset>
            <legend>{{ (instance.translation ~ '.admin.create.form.fieldset.file')|trans }}</legend>
            <div class="row">
                <div class="fallback">
                    {{ form_label(form.file) }}
                    {{ form_errors(form.file) }}
                    {{ form_widget(form.file) }}
                </div>
                <div class="dropzone-preview">
                    <div class="dz-default dz-message">
                        <span>{{ (instance.translation ~ '.dropzone.default')|trans }}</span>
                    </div>
                </div>
            </div>
        </fieldset>
        {% if watermarks %}
            <fieldset>
                <legend>{{ (instance.translation ~ '.admin.create.form.fieldset.watermark')|trans }}</legend>
                <label>{{ (instance.translation ~ '.admin.create.form.watermark')|trans }}</label>
                {% for name, size in watermarks %}
                    <div class="row">
                        <div class="column small-2">
                            <div class="switch tiny watermark">
                                <input id="watermark{{ loop.index }}" type="checkbox" name="watermark[{{ name }}]">
                                <label for="watermark{{ loop.index }}"></label>
                            </div>
                        </div>
                        <div class="column small-10">
                            {{ name }} ({{ size }})
                        </div>
                    </div>
                {% endfor %}
            </fieldset>
        {% endif %}
    </div>
    <div class="large-6 medium-6 small-12 columns">
        <fieldset>
            <legend>{{ (instance.translation ~ '.admin.create.form.fieldset.tags')|trans }}</legend>
            <div class="row">
                {{ form_label(form.tag) }}
                {{ form_errors(form.tag) }}
                {{ form_widget(form.tag) }}
            </div>
            <div class="row">
                {{ form_label(form.parent) }}
                {{ form_errors(form.parent) }}
                {{ form_widget(form.parent) }}
            </div>
            <div class="row">
                {{ form_label(form.tags) }}
                {{ form_errors(form.tags) }}
                {{ form_widget(form.tags) }}
            </div>
        </fieldset>
    </div>
{% endblock %}

{% block content_data_options_data_add %}
    <div class="large-2 columns end">
        {{ form_errors(form.private) }}
        {{ form_label(form.private) }}
        <div class="switch">
            {{ form_widget(form.private) }}
            <label for="{{ form.private.vars.id }}"></label>
        </div>
    </div>
{% endblock %}

{% block body_javascripts_ready %}
    {{ parent() }}
    Dropzone.options.mediaDropzone = {
        paramName: "{{ form.file.vars.name }}",
        previewsContainer: ".dropzone-preview",
        clickable: '.dropzone-preview',
        autoProcessQueue: false,
        maxFilesize: 9999,
        parallelUploads: 1,
        init: function()
        {
            var myDropzone = this;
            $("#media-dropzone").submit(function(e)
            {
                e.preventDefault();
                $("input").prop('disabled', true);
                $("textarea").prop('disabled', true);
                $("checkbox").prop('disabled', true);
                $("select").prop('disabled', true);
                $("button").prop('disabled', true);
                myDropzone.processQueue();
            });
            myDropzone.on("addedfile", function(file)
            {
                $(".dz-message").hide();
            });
            myDropzone.on("complete", function(file)
            {
                myDropzone.processQueue();
            });
            myDropzone.on("queuecomplete", function()
            {
                $.ajax
                ({
                    type:    'POST',
                    url:     '{{ path('fhm_api_media_uploaded') }}',
                    data:    {
                        counter: {
                            accepted: myDropzone.getAcceptedFiles().length,
                            rejected: myDropzone.getRejectedFiles().length
                        }
                    },
                    success: function (data)
                    {
                        location.reload();
                    }
                });
            });
        },
        dictDefaultMessage: "{{ (instance.translation ~ '.dropzone.default')|trans }}",
        dictFallbackMessage: "{{ (instance.translation ~ '.dropzone.fallbackMessage')|trans }}",
        dictFallbackText: "{{ (instance.translation ~ '.dropzone.fallbackText')|trans }}",
        dictFileTooBig: "{{ (instance.translation ~ '.dropzone.fileTooBig')|trans }}",
        dictInvalidFileType: "{{ (instance.translation ~ '.dropzone.invalidFileType')|trans }}",
        dictResponseError: "{{ (instance.translation ~ '.dropzone.responseError')|trans }}",
        dictCancelUpload: "{{ (instance.translation ~ '.dropzone.cancelUpload')|trans }}",
        dictCancelUploadConfirmation: "{{ (instance.translation ~ '.dropzone.cancelUploadConfirmation')|trans }}",
        dictRemoveFile: "{{ (instance.translation ~ '.dropzone.removeFile')|trans }}",
        dictRemoveFileConfirmation: "{{ (instance.translation ~ '.dropzone.removeFileConfirmation')|trans }}",
        dictMaxFilesExceeded: "{{ (instance.translation ~ '.dropzone.maxFilesExceeded')|trans }}"
    };
{% endblock %}